{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP VICTUS\\\\OneDrive\\\\Desktop\\\\ev chatbot\\\\frontend\\\\src\\\\components\\\\ChatBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport config from \"../config\";\nimport \"./ChatBox.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatBox() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [query, setQuery] = useState(\"\");\n  const askBot = async () => {\n    if (!query.trim()) return;\n    const userMessage = {\n      text: query,\n      sender: \"user\"\n    };\n    setMessages(prev => [...prev, userMessage]);\n    try {\n      const res = await fetch(`${config.API_URL}/ask`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          query\n        })\n      });\n      if (!res.ok) throw new Error(\"Server error\");\n      const data = await res.json();\n      const botMessage = {\n        text: data.response,\n        sender: \"bot\"\n      };\n      setMessages(prev => [...prev, botMessage]);\n    } catch (err) {\n      const errorMsg = {\n        text: \"⚠️ Failed to get response from server.\",\n        sender: \"bot\"\n      };\n      setMessages(prev => [...prev, errorMsg]);\n      console.error(\"askBot error:\", err);\n    }\n    setQuery(\"\"); // Clear input field\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: query,\n        onChange: e => setQuery(e.target.value),\n        onKeyDown: handleKeyPress,\n        placeholder: \"Type your message...\",\n        rows: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: askBot,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatBox, \"UdnsYc9qrkUuzwH8xkLgmylWbN0=\");\n_c = ChatBox;\nexport default ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useState","config","jsxDEV","_jsxDEV","ChatBox","_s","messages","setMessages","query","setQuery","askBot","trim","userMessage","text","sender","prev","res","fetch","API_URL","method","headers","body","JSON","stringify","ok","Error","data","json","botMessage","response","err","errorMsg","console","error","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","onKeyDown","handleKeyPress","placeholder","rows","onClick","_c","$RefreshReg$"],"sources":["C:/Users/HP VICTUS/OneDrive/Desktop/ev chatbot/frontend/src/components/ChatBox.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport config from \"../config\"; \r\nimport \"./ChatBox.css\"; \r\n\r\nfunction ChatBox() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  const askBot = async () => {\r\n    if (!query.trim()) return;\r\n  \r\n    const userMessage = { text: query, sender: \"user\" };\r\n    setMessages((prev) => [...prev, userMessage]);\r\n  \r\n    try {\r\n      const res = await fetch(`${config.API_URL}/ask`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ query }),\r\n      });\r\n  \r\n      if (!res.ok) throw new Error(\"Server error\");\r\n  \r\n      const data = await res.json();\r\n      const botMessage = { text: data.response, sender: \"bot\" };\r\n      setMessages((prev) => [...prev, botMessage]);\r\n    } catch (err) {\r\n      const errorMsg = { text: \"⚠️ Failed to get response from server.\", sender: \"bot\" };\r\n      setMessages((prev) => [...prev, errorMsg]);\r\n      console.error(\"askBot error:\", err);\r\n    }\r\n  \r\n    setQuery(\"\"); // Clear input field\r\n  };\r\n  \r\n  \r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <div className=\"chat-box\">\r\n        {messages.map((msg, index) => (\r\n          <div key={index} className={`message ${msg.sender}`}>\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"chat-input\">\r\n        <textarea\r\n          value={query}\r\n          onChange={(e) => setQuery(e.target.value)}\r\n          onKeyDown={handleKeyPress}\r\n          placeholder=\"Type your message...\"\r\n          rows=\"2\"\r\n        />\r\n        <button onClick={askBot}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatBox;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}