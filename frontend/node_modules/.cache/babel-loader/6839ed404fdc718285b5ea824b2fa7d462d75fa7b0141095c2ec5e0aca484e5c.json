{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\delll\\\\OneDrive\\\\Documents\\\\smg\\\\frontend\\\\src\\\\components\\\\ChatBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport config from \"../config\";\nimport \"./ChatBox.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatBox() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [query, setQuery] = useState(\"\");\n  const [darkMode, setDarkMode] = useState(localStorage.getItem(\"darkMode\") === \"true\");\n  useEffect(() => {\n    document.body.classList.toggle(\"dark-mode\", darkMode);\n    localStorage.setItem(\"darkMode\", darkMode);\n  }, [darkMode]);\n  const askBot = async () => {\n    if (!query.trim()) return;\n    const userMessage = {\n      text: query,\n      sender: \"user\"\n    };\n    setMessages(prev => [...prev, userMessage]);\n    const res = await fetch(`${config.API_URL}/ask`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        query\n      })\n    });\n    const data = await res.json();\n    const botMessage = {\n      text: data.response,\n      sender: \"bot\"\n    };\n    setMessages(prev => [...prev, botMessage]);\n    setQuery(\"\"); // Clear input field\n  };\n  const handleKeyPress = event => {\n    if (event.key === \"Enter\" && !event.shiftKey) {\n      event.preventDefault(); // Prevent new line on Enter\n      askBot(); // Send message\n    } else if (event.key === \"Enter\" && event.shiftKey) {\n      setQuery(prev => prev + \"\\n\"); // Add new line\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chat-container ${darkMode ? \"dark\" : \"light\"}`,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"toggle-btn\",\n      onClick: () => setDarkMode(!darkMode),\n      children: darkMode ? \"‚òÄÔ∏è Light Mode\" : \"üåô Dark Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: query,\n        onChange: e => setQuery(e.target.value),\n        onKeyDown: handleKeyPress,\n        placeholder: \"Type your message...\",\n        rows: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: askBot,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatBox, \"xGepRExsPSaOdbTO40SGBqgtlSU=\");\n_c = ChatBox;\nexport default ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useState","useEffect","config","jsxDEV","_jsxDEV","ChatBox","_s","messages","setMessages","query","setQuery","darkMode","setDarkMode","localStorage","getItem","document","body","classList","toggle","setItem","askBot","trim","userMessage","text","sender","prev","res","fetch","API_URL","method","headers","JSON","stringify","data","json","botMessage","response","handleKeyPress","event","key","shiftKey","preventDefault","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","value","onChange","e","target","onKeyDown","placeholder","rows","_c","$RefreshReg$"],"sources":["C:/Users/delll/OneDrive/Documents/smg/frontend/src/components/ChatBox.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport config from \"../config\"; \r\nimport \"./ChatBox.css\"; \r\n\r\nfunction ChatBox() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [query, setQuery] = useState(\"\");\r\n  const [darkMode, setDarkMode] = useState(\r\n    localStorage.getItem(\"darkMode\") === \"true\"\r\n  );\r\n\r\n  useEffect(() => {\r\n    document.body.classList.toggle(\"dark-mode\", darkMode);\r\n    localStorage.setItem(\"darkMode\", darkMode);\r\n  }, [darkMode]);\r\n\r\n  const askBot = async () => {\r\n    if (!query.trim()) return;\r\n\r\n    const userMessage = { text: query, sender: \"user\" };\r\n    setMessages((prev) => [...prev, userMessage]);\r\n\r\n    const res = await fetch(`${config.API_URL}/ask`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ query }),\r\n    });\r\n    const data = await res.json();\r\n\r\n    const botMessage = { text: data.response, sender: \"bot\" };\r\n    setMessages((prev) => [...prev, botMessage]);\r\n    setQuery(\"\"); // Clear input field\r\n  };\r\n\r\n  const handleKeyPress = (event) => {\r\n    if (event.key === \"Enter\" && !event.shiftKey) {\r\n      event.preventDefault(); // Prevent new line on Enter\r\n      askBot(); // Send message\r\n    } else if (event.key === \"Enter\" && event.shiftKey) {\r\n      setQuery((prev) => prev + \"\\n\"); // Add new line\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`chat-container ${darkMode ? \"dark\" : \"light\"}`}>\r\n      {/* Dark Mode Toggle */}\r\n      <button className=\"toggle-btn\" onClick={() => setDarkMode(!darkMode)}>\r\n        {darkMode ? \"‚òÄÔ∏è Light Mode\" : \"üåô Dark Mode\"}\r\n      </button>\r\n\r\n      {/* Chat Box */}\r\n      <div className=\"chat-box\">\r\n        {messages.map((msg, index) => (\r\n          <div key={index} className={`message ${msg.sender}`}>\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Input Section */}\r\n      <div className=\"chat-input\">\r\n        <textarea\r\n          value={query}\r\n          onChange={(e) => setQuery(e.target.value)}\r\n          onKeyDown={handleKeyPress}\r\n          placeholder=\"Type your message...\"\r\n          rows=\"2\"\r\n        />\r\n        <button onClick={askBot}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatBox;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}